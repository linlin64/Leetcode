16. 3Sum Closest 
time complexity:n^2
1.sort the array
2.then set two loops, the outer layer is to go through all the elements and 
the inner layer is to set two Pointers (left pointer=i+1,right pointer=n-1)
3.calculate the current sum and gap.(nums[i]+nums[left]+nums[right],
If the current gap is less than the minimum gap, update the gap history and result.
4.then move the left and right pointers in three cases. 
If sum==target, the result sum can be returned directly. 
If sum>target, the right pointer is moved to the left.
If sum<target, the left pointer is moved to the right.
5.after traversing all elements,the sum who is closest to the target will be returned.


//time complexity: n^2
//先sort数组。然后设置两个for loop,外面一层是遍历所有元素。里面一层则设置双指针（left pointer=i+1,right pointer=n-1)， 
如果当前gap小于历史最小gap,则更新gap历史和result。 然后再分三种情况移动左右指针，如果sum==target可以直接返回结果sum.如果sum>target，
则右边指针得向左边移动，如果sum<target,则左边指针得向右移动。直到遍历完所有元素后，返回历史最近的sum。
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int gap=Integer.MAX_VALUE;
        int result=0;

        for(int i=0;i<nums.length;i++)
        {
            int left=i+1;
            int right=nums.length-1;
            
            while(left<right)
            {
                int sum=nums[i]+nums[left]+nums[right];
                int curGap=Math.abs(target-sum);
                if(gap>curGap)
                {
                    gap=curGap;
                    result=sum;
                }
                if(sum==target)
                {
                    return target;
                }
                else if (sum>target)
                {
                    right--;
                }
                else
                {
                    left++;
                }

            }
        }
        return result;
    }
}
