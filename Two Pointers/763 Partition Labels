763 Partition Labels
class Solution {
    public List<Integer> partitionLabels(String s) {
        char[] arr =s.toCharArray();//字符串转换成数组
        int[] cache = new int[128];
        for(int i=0;i<arr.length;i++)
        {
            char current=arr[i];
            cache[current]=i;     //存储字符的位置在对应的ascii目录的index下，其实这一步是更新arr中的字符的最后一次出现的也就是最远位置。
        }
        int left=0;int right=0;//left用作每个part的开头位置，用来隔断string into part string， 
        right是用来找寻找当前current的last max position 是否超过历史last max position,如果超过，则更新right。
        （也就是说一个part string 最后一个字母的前面所有单词的last max position要么小于或者等于它。）
        因此当当前index等于历史lasy max position时，说明到这个位置的可以分成一个part string.然后算出size，同时更新新一轮的left和right的。
        right也就是在前面一个part string的后一个位置，left就是新的string的第一个字母，right也同理。 left在此处的作用主要用于计算size
        int index=0;
        List<Integer> result= new LinkedList<>();
        while(index<arr.length)
        {
            char current=arr[index];
            right=Math.max(right,cache[current]);
            if(index==right)
            {
                int size=right-left+1;
                result.add(size);
                right++;
                left=right;
            }
            index++;
        }
        return result;

    }
}
